load("//tf:rules.bzl", "tf_apply", "tf_apply_plan", "tf_init", "tf_module", "tf_plan", "tf_show_plan", "tf_validate_test")

package(default_visibility = ["//visibility:public"])

tf_module(
    name = "module",
    srcs = [
        "main.tf",
        "provider.tf",
    ],
    marker = ".tf_module",
    plugins = [
        "terraform-provider-aws",
    ],
    deps = [
        "//app",
    ],
)

# Runs terraform validate. Does not need an access to remote state.
tf_validate_test(
    name = "validate",
    lock = ".terraform.lock.hcl",
    module = ":module",
)

# "bazel run :init" generates lock file. It has to be stored under source control.
tf_init(
    name = "init",
    module = ":module",
    lock = ".terraform.lock.hcl",
)

# TODO: plan depends on the remote state in AWS. Is there a way to check that it did not changed
# during the build stage?

# "bazel build :plan' should call terraform plan and generate tfplan file.
tf_plan(
    name = "plan",
    lock = ".terraform.lock.hcl",
    module = ":module",
)

# "bazel run :apply" should load tfplan and call terraform apply.
tf_apply_plan(
    name = "apply_plan",
    plan = ":plan",
)

# Inspect plan generated by tf_plan
tf_show_plan(
    name = "show_plan",
    plan = ":plan",
)

# This one does not use pre-generated plan.
tf_apply(
    name = "apply",
    lock = ".terraform.lock.hcl",
    module = ":module",
)
